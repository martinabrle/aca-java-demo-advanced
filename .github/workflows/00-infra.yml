name: 01-Infra

on:
  workflow_call:
  
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy_infra:
    runs-on: ubuntu-latest
    env:
      ACA_NAME: ${{secrets.ACA_NAME}}
      ACA_SUBSCRIPTION_ID: ${{secrets.ACA_SUBSCRIPTION_ID}}
      ACA_RESOURCE_GROUP: ${{secrets.ACA_RESOURCE_GROUP}}
      PGSQL_SUBSCRIPTION_ID: ${{secrets.PGSQL_SUBSCRIPTION_ID || secrets.ACA_SUBSCRIPTION_ID}}
      PGSQL_RESOURCE_GROUP: ${{secrets.PGSQL_RESOURCE_GROUP || secrets.ACA_RESOURCE_GROUP}}
      CONTAINER_REGISTRY_SUBSCRIPTION_ID: ${{secrets.CONTAINER_REGISTRY_SUBSCRIPTION_ID || secrets.ACA_SUBSCRIPTION_ID}}
      CONTAINER_REGISTRY_RESOURCE_GROUP: ${{secrets.CONTAINER_REGISTRY_RESOURCE_GROUP || secrets.ACA_RESOURCE_GROUP}}
      LOG_ANALYTICS_WRKSPC_SUBSCRIPTION_ID: ${{secrets.LOG_ANALYTICS_WRKSPC_SUBSCRIPTION_ID || secrets.ACA_SUBSCRIPTION_ID}}
      LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP: ${{secrets.LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP || secrets.ACA_RESOURCE_GROUP}}
    steps:
      - uses: actions/checkout@v4
      
      - name: Azure login in ACA Subscription # https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure
        uses: azure/login@v2
        with:
          client-id: "${{secrets.AAD_CLIENT_ID}}"
          tenant-id: "${{secrets.AAD_TENANT_ID}}"
          subscription-id: "${{env.ACA_SUBSCRIPTION_ID}}"

      - name: Create Azure resource groups
        working-directory: ./scripts/deployment/templates/bicep/
        run: |
            az deployment sub create \
              -l "${{secrets.AZURE_LOCATION}}" \
              --template-file ./resource_groups.bicep \
              --parameters location="${{secrets.AZURE_LOCATION}}" \
                           acaRG="${{env.ACA_RESOURCE_GROUP}}" \
                           acaTags="${{vars.ACA_RESOURCE_TAGS}}" \
                           containerRegistrySubscriptionId="${{env.CONTAINER_REGISTRY_SUBSCRIPTION_ID}}" \
                           containerRegistryRG="${{env.CONTAINER_REGISTRY_RESOURCE_GROUP}}" \
                           containerRegistryTags="${{vars.CONTAINER_REGISTRY_RESOURCE_TAGS}}" \
                           pgsqlSubscriptionId="${{env.PGSQL_SUBSCRIPTION_ID}}" \
                           pgsqlRG="${{env.PGSQL_RESOURCE_GROUP}}" \
                           pgsqlTags="${{vars.PGSQL_RESOURCE_TAGS}}" \
                           logAnalyticsSubscriptionId="${{env.LOG_ANALYTICS_WRKSPC_SUBSCRIPTION_ID}}" \
                           logAnalyticsRG="${{env.LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}}" \
                           logAnalyticsTags="${{vars.LOG_ANALYTICS_WRKSPC_RESOURCE_TAGS}}"
        
      - name: Deploy Azure resources
        id: deployment
        working-directory: ./scripts/deployment/templates/bicep/
        run: |
          if [[ -z "${{secrets.DBA_GROUP_NAME}}" ]]; then
            echo "DBA Group name is not set"
            exit 1
          fi

          dbaGroupId=`az ad group show --group "${{secrets.DBA_GROUP_NAME}}" --query '[id]' -o tsv`
          echo "DBA_GROUP_ID=${dbaGroupId}" >> $GITHUB_OUTPUT

          echo "Deploying with the following parameters:"
          echo "DBA Group Name: '${{secrets.DBA_GROUP_NAME}}'"
          echo "DBA Group Id: $dbaGroupId"
          echo "ACA Service name: '${{env.ACA_NAME}}'"
          echo "Deployment client IP Address: '${clientIP}'"
          
          # As all is deployed using the template, I will not need an exception for the current
          # GH Runner IP Address
          export clientIP=""
          deploymentOutput=`az deployment group create \
                                        --resource-group ${{env.ACA_RESOURCE_GROUP}} \
                                        --template-file ./main.bicep \
                                        --parameters acaName="${{env.ACA_NAME}}" \
                                                     acaTags="${{vars.ACA_RESOURCE_TAGS}}" \
                                                     containerRegistryName="${{secrets.CONTAINER_REGISTRY_NAME}}" \
                                                     containerRegistrySubscriptionId="${{env.CONTAINER_REGISTRY_SUBSCRIPTION_ID}}" \
                                                     containerRegistryRG="${{env.CONTAINER_REGISTRY_RESOURCE_GROUP}}" \
                                                     containerRegistryTags="${{vars.CONTAINER_REGISTRY_RESOURCE_TAGS}}" \
                                                     dnsZoneName="${{secrets.DNS_ZONE_NAME}}" \
                                                     parentDnsZoneName="${{secrets.PARENT_DNS_ZONE_NAME}}" \
                                                     parentDnsZoneSubscriptionId="${{secrets.PARENT_DNS_SUBSCRIPTION_ID}}" \
                                                     parentDnsZoneRG="${{secrets.PARENT_DNS_ZONE_RESOURCE_GROUP}}" \
                                                     parentDnsZoneTags="${{vars.PARENT_DNS_ZONE_TAGS}}" \
                                                     petClinicDnsZoneName="${{secrets.PET_CLINIC_DNS_ZONE_NAME}}" \
                                                     pgsqlName="${{secrets.PGSQL_NAME}}" \
                                                     pgsqlAADAdminGroupName="${{secrets.DBA_GROUP_NAME}}" \
                                                     pgsqlAADAdminGroupObjectId="${dbaGroupId}" \
                                                     pgsqlSubscriptionId="${{env.PGSQL_SUBSCRIPTION_ID}}" \
                                                     pgsqlRG="${{secrets.PGSQL_RESOURCE_GROUP}}" \
                                                     pgsqlTodoAppDbName="${{secrets.TODO_APP_DB_NAME}}" \
                                                     pgsqlPetClinicDbName="${{secrets.PET_CLINIC_DB_NAME}}" \
                                                     todoAppDbUserName="${{secrets.TODO_APP_DB_USER_NAME}}" \
                                                     petClinicCustsSvcDbUserName="${{secrets.PET_CLINIC_CUSTS_SVC_DB_USER_NAME}}" \
                                                     petClinicVetsSvcDbUserName="${{secrets.PET_CLINIC_VETS_SVC_DB_USER_NAME}}" \
                                                     petClinicVisitsSvcDbUserName="${{secrets.PET_CLINIC_VISITS_SVC_DB_USER_NAME}}" \
                                                     pgsqlTags="${{vars.PGSQL_RESOURCE_TAGS}}" \
                                                     logAnalyticsName="${{secrets.LOG_ANALYTICS_WRKSPC_NAME}}" \
                                                     logAnalyticsSubscriptionId="${{env.LOG_ANALYTICS_WRKSPC_SUBSCRIPTION_ID}}" \
                                                     logAnalyticsRG="${{env.LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}}" \
                                                     logAnalyticsTags="${{vars.LOG_ANALYTICS_WRKSPC_RESOURCE_TAGS}}" \
                                                     petClinicGitConfigRepoUri="${{secrets.PET_CLINIC_GIT_CONFIG_REPO_URI}}" \
                                                     petClinicGitConfigRepoUserName="${{secrets.PET_CLINIC_GIT_CONFIG_REPO_USERNAME}}" \
                                                     petClinicGitConfigRepoPassword="${{secrets.PET_CLINIC_GIT_CONFIG_REPO_PASSWORD}}" \
                                                     location="${{secrets.AZURE_LOCATION}}" `
          
          echo "Deployment output:"
          echo "===================================================="
          echo "$deploymentOutput"
          echo "===================================================="

